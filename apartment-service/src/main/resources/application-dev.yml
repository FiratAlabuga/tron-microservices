spring:
  application:
    name: apartment-service

  datasource:
#    url: jdbc:postgresql://${POSTGRES_HOST:localhost}:${POSTGRES_PORT:5433}/${POSTGRES_DB:apartment_db}
#    username: ${POSTGRES_USER:postgres}
#    password: ${POSTGRES_PASSWORD:postgres}
    url: jdbc:postgresql://localhost:5433/apartment_db
    username: postgres
    password: postgres
    driver-class-name: org.postgresql.Driver

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        format_sql: true

  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      group-id: apartment-service-group
      max-poll-records: 200
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      linger-ms: 20
    listener:
      ack-mode: batch
      idle-event-interval: 60000
    properties:
      spring.json.value.default.type: com.tron.events.dto.PaymentCompletedEvent,com.tron.events.dto.PaymentRollbackEvent

kafka:
  topics:
    payment-created: payment.created
    payment-completed: payment.completed
    payment-rollback: payment.rollback

logging:
  level:
    root: INFO
    org.apache.kafka: DEBUG
    org.springframework.kafka: DEBUG
